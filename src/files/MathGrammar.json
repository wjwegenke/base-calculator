{ "grammar": "expression = additive\n\nadditive\n  = first:multiplicative rest:(('+' / '-') multiplicative)+ {\n    return rest.reduce(function(memo, curr) {\n        return {operator: curr[0], left: memo, right: curr[1]};\n    }, first);\n  }\n  / multiplicative\n\nmultiplicative\n  = first:exponent rest:(('*' / '%' / '/' / '') exponent)+ {\n    return rest.reduce(function(memo, curr) {\n        return {operator: curr[0] || '*', left: memo, right: curr[1]};\n    }, first);\n  }\n  / exponent\n\nexponent\n  = first:primary rest:(('^') primary)+ {\n    return rest.reduce(function(memo, curr) {\n        return {operator: curr[0], left: memo, right: curr[1]};\n    }, first);\n  }\n  / primary\n\nprimary\n  = number\n  / '(' additive:additive ')' { return additive; }\n\nnumber\n  = digits:[0-9A-Z]+ point:'.' decimals:[0-9A-Z]+ { return digits.join('') + point + decimals.join(''); }\n  / digits:[0-9A-Z]+ { return digits.join(''); }\n  / symbol:[eÏ€] { return symbol }" }